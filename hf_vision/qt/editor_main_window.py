# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hf_vision/qt/editor_main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_EditorMainWindow(object):
    def setupUi(self, EditorMainWindow):
        EditorMainWindow.setObjectName("EditorMainWindow")
        EditorMainWindow.resize(1058, 808)
        EditorMainWindow.setUnifiedTitleAndToolBarOnMac(True)
        self.centralwidget = QtWidgets.QWidget(EditorMainWindow)
        self.centralwidget.setObjectName("centralwidget")
        EditorMainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(EditorMainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1058, 30))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        self.menu_Help = QtWidgets.QMenu(self.menubar)
        self.menu_Help.setObjectName("menu_Help")
        self.menu_Edit = QtWidgets.QMenu(self.menubar)
        self.menu_Edit.setObjectName("menu_Edit")
        self.menuChange_Media_Source = QtWidgets.QMenu(self.menu_Edit)
        self.menuChange_Media_Source.setObjectName("menuChange_Media_Source")
        self.menu_Project = QtWidgets.QMenu(self.menubar)
        self.menu_Project.setObjectName("menu_Project")
        self.menuWeights = QtWidgets.QMenu(self.menu_Project)
        self.menuWeights.setObjectName("menuWeights")
        self.menuReid_StrongSORT = QtWidgets.QMenu(self.menuWeights)
        self.menuReid_StrongSORT.setObjectName("menuReid_StrongSORT")
        self.menuRegionals_Settings = QtWidgets.QMenu(self.menu_Project)
        self.menuRegionals_Settings.setObjectName("menuRegionals_Settings")
        EditorMainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(EditorMainWindow)
        self.statusbar.setObjectName("statusbar")
        EditorMainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(EditorMainWindow)
        self.toolBar.setObjectName("toolBar")
        EditorMainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(EditorMainWindow)
        self.toolBar_2.setObjectName("toolBar_2")
        EditorMainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        self.toolBar_3 = QtWidgets.QToolBar(EditorMainWindow)
        self.toolBar_3.setObjectName("toolBar_3")
        EditorMainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_3)
        self.toolBar_4 = QtWidgets.QToolBar(EditorMainWindow)
        self.toolBar_4.setObjectName("toolBar_4")
        EditorMainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_4)
        self.toolBar_5 = QtWidgets.QToolBar(EditorMainWindow)
        self.toolBar_5.setObjectName("toolBar_5")
        EditorMainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_5)
        self.actionNewRegionalMap = QtWidgets.QAction(EditorMainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/icons/新建.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNewRegionalMap.setIcon(icon)
        self.actionNewRegionalMap.setObjectName("actionNewRegionalMap")
        self.actionOpenRegionalMap = QtWidgets.QAction(EditorMainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icon/icons/打开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpenRegionalMap.setIcon(icon1)
        self.actionOpenRegionalMap.setObjectName("actionOpenRegionalMap")
        self.actionCloseRegionalMap = QtWidgets.QAction(EditorMainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icon/icons/关闭.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCloseRegionalMap.setIcon(icon2)
        self.actionCloseRegionalMap.setObjectName("actionCloseRegionalMap")
        self.action = QtWidgets.QAction(EditorMainWindow)
        self.action.setObjectName("action")
        self.actionQuitApp = QtWidgets.QAction(EditorMainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icon/icons/退出.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuitApp.setIcon(icon3)
        self.actionQuitApp.setMenuRole(QtWidgets.QAction.QuitRole)
        self.actionQuitApp.setObjectName("actionQuitApp")
        self.actionAboutApp = QtWidgets.QAction(EditorMainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icon/icons/告警实心.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAboutApp.setIcon(icon4)
        self.actionAboutApp.setObjectName("actionAboutApp")
        self.actionDrawLine = QtWidgets.QAction(EditorMainWindow)
        self.actionDrawLine.setCheckable(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icon/icons/线.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDrawLine.setIcon(icon5)
        self.actionDrawLine.setObjectName("actionDrawLine")
        self.actionDrawPolygonArea = QtWidgets.QAction(EditorMainWindow)
        self.actionDrawPolygonArea.setCheckable(True)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icon/icons/面.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDrawPolygonArea.setIcon(icon6)
        self.actionDrawPolygonArea.setObjectName("actionDrawPolygonArea")
        self.actionSourceLocalCamera = QtWidgets.QAction(EditorMainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icon/icons/摄像头.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSourceLocalCamera.setIcon(icon7)
        self.actionSourceLocalCamera.setObjectName("actionSourceLocalCamera")
        self.actionSourceRemoteCamera = QtWidgets.QAction(EditorMainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icon/icons/5摄像头.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSourceRemoteCamera.setIcon(icon8)
        self.actionSourceRemoteCamera.setObjectName("actionSourceRemoteCamera")
        self.actionSourceMediaVideo = QtWidgets.QAction(EditorMainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icon/icons/file-mp4.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSourceMediaVideo.setIcon(icon9)
        self.actionSourceMediaVideo.setObjectName("actionSourceMediaVideo")
        self.actionSourceStaticImage = QtWidgets.QAction(EditorMainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icon/icons/插入图片.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSourceStaticImage.setIcon(icon10)
        self.actionSourceStaticImage.setObjectName("actionSourceStaticImage")
        self.actionStartOrPauseDetect = QtWidgets.QAction(EditorMainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icon/icons/播放2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionStartOrPauseDetect.setIcon(icon11)
        self.actionStartOrPauseDetect.setObjectName("actionStartOrPauseDetect")
        self.actionStopDetect = QtWidgets.QAction(EditorMainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/icon/icons/停止.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionStopDetect.setIcon(icon12)
        self.actionStopDetect.setObjectName("actionStopDetect")
        self.actionConfigYoloV5Weights = QtWidgets.QAction(EditorMainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icon/icons/AI、智能大脑-09.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionConfigYoloV5Weights.setIcon(icon13)
        self.actionConfigYoloV5Weights.setObjectName("actionConfigYoloV5Weights")
        self.actionConfigReIdSSWeights = QtWidgets.QAction(EditorMainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/icon/icons/环保平台-智能巡检.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionConfigReIdSSWeights.setIcon(icon14)
        self.actionConfigReIdSSWeights.setObjectName("actionConfigReIdSSWeights")
        self.actionConfigReIdSSYaml = QtWidgets.QAction(EditorMainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/icon/icons/智能、连接-02.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionConfigReIdSSYaml.setIcon(icon15)
        self.actionConfigReIdSSYaml.setObjectName("actionConfigReIdSSYaml")
        self.actionSelectNormal = QtWidgets.QAction(EditorMainWindow)
        self.actionSelectNormal.setCheckable(True)
        self.actionSelectNormal.setChecked(True)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/icon/icons/arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSelectNormal.setIcon(icon16)
        self.actionSelectNormal.setObjectName("actionSelectNormal")
        self.menu_File.addAction(self.actionNewRegionalMap)
        self.menu_File.addAction(self.actionOpenRegionalMap)
        self.menu_File.addAction(self.actionCloseRegionalMap)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionQuitApp)
        self.menu_Help.addAction(self.actionAboutApp)
        self.menuChange_Media_Source.addAction(self.actionSourceLocalCamera)
        self.menuChange_Media_Source.addAction(self.actionSourceRemoteCamera)
        self.menuChange_Media_Source.addAction(self.actionSourceMediaVideo)
        self.menuChange_Media_Source.addAction(self.actionSourceStaticImage)
        self.menu_Edit.addAction(self.menuChange_Media_Source.menuAction())
        self.menuReid_StrongSORT.addAction(self.actionConfigReIdSSWeights)
        self.menuReid_StrongSORT.addAction(self.actionConfigReIdSSYaml)
        self.menuWeights.addAction(self.actionConfigYoloV5Weights)
        self.menuWeights.addAction(self.menuReid_StrongSORT.menuAction())
        self.menuRegionals_Settings.addAction(self.actionDrawLine)
        self.menuRegionals_Settings.addAction(self.actionDrawPolygonArea)
        self.menu_Project.addAction(self.actionStartOrPauseDetect)
        self.menu_Project.addAction(self.actionStopDetect)
        self.menu_Project.addSeparator()
        self.menu_Project.addAction(self.menuWeights.menuAction())
        self.menu_Project.addSeparator()
        self.menu_Project.addAction(self.menuRegionals_Settings.menuAction())
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_Edit.menuAction())
        self.menubar.addAction(self.menu_Project.menuAction())
        self.menubar.addAction(self.menu_Help.menuAction())
        self.toolBar.addAction(self.actionNewRegionalMap)
        self.toolBar.addAction(self.actionOpenRegionalMap)
        self.toolBar.addAction(self.actionCloseRegionalMap)
        self.toolBar.addAction(self.actionQuitApp)
        self.toolBar_2.addAction(self.actionSourceLocalCamera)
        self.toolBar_2.addAction(self.actionSourceRemoteCamera)
        self.toolBar_2.addAction(self.actionSourceMediaVideo)
        self.toolBar_2.addAction(self.actionSourceStaticImage)
        self.toolBar_3.addAction(self.actionStartOrPauseDetect)
        self.toolBar_3.addAction(self.actionStopDetect)
        self.toolBar_4.addAction(self.actionConfigYoloV5Weights)
        self.toolBar_4.addAction(self.actionConfigReIdSSWeights)
        self.toolBar_4.addAction(self.actionConfigReIdSSYaml)
        self.toolBar_5.addAction(self.actionSelectNormal)
        self.toolBar_5.addAction(self.actionDrawLine)
        self.toolBar_5.addAction(self.actionDrawPolygonArea)

        self.retranslateUi(EditorMainWindow)
        self.actionNewRegionalMap.triggered.connect(EditorMainWindow.onRegMapNew)
        self.actionOpenRegionalMap.triggered.connect(EditorMainWindow.onRegMapOpen)
        self.actionCloseRegionalMap.triggered.connect(EditorMainWindow.onRegMapClose)
        self.actionQuitApp.triggered.connect(EditorMainWindow.onQuitApp)
        self.actionAboutApp.triggered.connect(EditorMainWindow.onAboutApp)
        self.actionSourceLocalCamera.triggered.connect(EditorMainWindow.onChangeSourceLocalCamera)
        self.actionSourceRemoteCamera.triggered.connect(EditorMainWindow.onChangeSourceRemoteCamera)
        self.actionSourceMediaVideo.triggered.connect(EditorMainWindow.onChangeSourceMediaVideo)
        self.actionSourceStaticImage.triggered.connect(EditorMainWindow.onChangeSourceStaticImage)
        self.actionConfigYoloV5Weights.triggered.connect(EditorMainWindow.on_change_yolov5_weights)
        self.actionConfigReIdSSWeights.triggered.connect(EditorMainWindow.on_change_reid_ss_weights)
        self.actionConfigReIdSSYaml.triggered.connect(EditorMainWindow.on_change_reid_ss_config)
        self.actionDrawLine.triggered.connect(EditorMainWindow.on_draw_regional_boundary_line)
        self.actionDrawPolygonArea.triggered.connect(EditorMainWindow.on_draw_regional_area)
        self.actionSelectNormal.triggered.connect(EditorMainWindow.on_draw_reset_normal)
        self.actionStartOrPauseDetect.triggered.connect(EditorMainWindow.on_tracking_start_or_pause)
        self.actionStopDetect.triggered.connect(EditorMainWindow.on_tracking_stop)
        QtCore.QMetaObject.connectSlotsByName(EditorMainWindow)

    def retranslateUi(self, EditorMainWindow):
        _translate = QtCore.QCoreApplication.translate
        EditorMainWindow.setWindowTitle(_translate("EditorMainWindow", "Regional Detect Editor"))
        self.menu_File.setTitle(_translate("EditorMainWindow", "&File"))
        self.menu_Help.setTitle(_translate("EditorMainWindow", "&Help"))
        self.menu_Edit.setTitle(_translate("EditorMainWindow", "&Edit"))
        self.menuChange_Media_Source.setTitle(_translate("EditorMainWindow", "Load Media Source"))
        self.menu_Project.setTitle(_translate("EditorMainWindow", "&Project"))
        self.menuWeights.setTitle(_translate("EditorMainWindow", "Detect Settings"))
        self.menuReid_StrongSORT.setTitle(_translate("EditorMainWindow", "Reid (StrongSORT)"))
        self.menuRegionals_Settings.setTitle(_translate("EditorMainWindow", "Regionals Settings"))
        self.toolBar.setWindowTitle(_translate("EditorMainWindow", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("EditorMainWindow", "toolBar_2"))
        self.toolBar_3.setWindowTitle(_translate("EditorMainWindow", "toolBar_3"))
        self.toolBar_4.setWindowTitle(_translate("EditorMainWindow", "toolBar_4"))
        self.toolBar_5.setWindowTitle(_translate("EditorMainWindow", "toolBar_5"))
        self.actionNewRegionalMap.setText(_translate("EditorMainWindow", "&New Regional Map"))
        self.actionNewRegionalMap.setStatusTip(_translate("EditorMainWindow", "New Regional Map"))
        self.actionOpenRegionalMap.setText(_translate("EditorMainWindow", "&Open Regional Map"))
        self.actionOpenRegionalMap.setStatusTip(_translate("EditorMainWindow", "Open Regional Map"))
        self.actionCloseRegionalMap.setText(_translate("EditorMainWindow", "Close Regional Map"))
        self.actionCloseRegionalMap.setStatusTip(_translate("EditorMainWindow", "Close Regional Map"))
        self.action.setText(_translate("EditorMainWindow", "-"))
        self.actionQuitApp.setText(_translate("EditorMainWindow", "&Quit"))
        self.actionQuitApp.setStatusTip(_translate("EditorMainWindow", "Quit the application"))
        self.actionQuitApp.setShortcut(_translate("EditorMainWindow", "Ctrl+Q"))
        self.actionAboutApp.setText(_translate("EditorMainWindow", "&About..."))
        self.actionAboutApp.setStatusTip(_translate("EditorMainWindow", "Information about HuaFon"))
        self.actionDrawLine.setText(_translate("EditorMainWindow", "Line (Cordon)"))
        self.actionDrawPolygonArea.setText(_translate("EditorMainWindow", "Polygon (Warning Area)"))
        self.actionSourceLocalCamera.setText(_translate("EditorMainWindow", "Local Camera"))
        self.actionSourceLocalCamera.setStatusTip(_translate("EditorMainWindow", "Using local camera likes USB-Camera"))
        self.actionSourceRemoteCamera.setText(_translate("EditorMainWindow", "Remote Camera"))
        self.actionSourceRemoteCamera.setStatusTip(_translate("EditorMainWindow", "Using remote camera by using RTSP protocol."))
        self.actionSourceMediaVideo.setText(_translate("EditorMainWindow", "Media Video"))
        self.actionSourceMediaVideo.setStatusTip(_translate("EditorMainWindow", "Using local video file, likes mp4."))
        self.actionSourceStaticImage.setText(_translate("EditorMainWindow", "Static Image"))
        self.actionSourceStaticImage.setStatusTip(_translate("EditorMainWindow", "Using a static image from local file."))
        self.actionStartOrPauseDetect.setText(_translate("EditorMainWindow", "Start/Pause"))
        self.actionStartOrPauseDetect.setToolTip(_translate("EditorMainWindow", "Start/Pause detect"))
        self.actionStopDetect.setText(_translate("EditorMainWindow", "Stop"))
        self.actionConfigYoloV5Weights.setText(_translate("EditorMainWindow", "YoloV5"))
        self.actionConfigReIdSSWeights.setText(_translate("EditorMainWindow", "StrongSORT Weights"))
        self.actionConfigReIdSSWeights.setToolTip(_translate("EditorMainWindow", "StrongSORT Weights"))
        self.actionConfigReIdSSYaml.setText(_translate("EditorMainWindow", "StrongSORT Yaml Config"))
        self.actionConfigReIdSSYaml.setToolTip(_translate("EditorMainWindow", "StrongSORT Yaml Config"))
        self.actionSelectNormal.setText(_translate("EditorMainWindow", "SelectNormal"))
        self.actionSelectNormal.setToolTip(_translate("EditorMainWindow", "Select mode"))
